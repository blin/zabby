#!/usr/bin/python
import threading
import signal
import logging

from zabby import __version__
from zabby.core.exceptions import ConfigurationError
from zabby.hostos import detect_host_os
from zabby.agent import (DataSource, KeyParser, AgentRequestHandler,
                         set_data_source, set_protocol, ZBXDProtocol,
                         AgentServer)
from zabby.config_manager import ConfigManager, ModuleLoader
from zabby.cli import option_parser, daemonize

LOG = logging.getLogger(__name__)

options, _ = option_parser.parse_args()

config_manager = ConfigManager(options.config, ModuleLoader())
config_manager.update_config()

if options.daemonize:
    daemonize(options.pid_file)

# at this point stdout and stderr are written to nowhere
# every exception should be logged
try:
    set_data_source(DataSource(KeyParser(), config_manager))
    set_protocol(ZBXDProtocol())

    server = AgentServer(config_manager.listen_address, AgentRequestHandler)

    host_os = detect_host_os()
    host_os.start_collectors()

    threading.Thread(target=server.serve_forever).start()

    shutdown = threading.Event()

    def shutdown_handler(signal, frame):
        server.shutdown()
        host_os.stop_collectors()
        shutdown.set()

    def reload_handler(signal, frame):
        LOG.info('Got SIGHUP, reloading config')
        try:
            config_manager.update_config()
        except ConfigurationError:
            LOG.warn('Exception occurred while reloading configuration')


    signal.signal(signal.SIGINT, shutdown_handler)
    signal.signal(signal.SIGTERM, shutdown_handler)

    signal.signal(signal.SIGHUP, reload_handler)

    LOG.info("Started zabby {0}".format(__version__))
    while not shutdown.is_set():
        signal.pause()
    LOG.info('Stopped')
except:
    LOG.exception('Exception occurred')
